FILE 1: app.py
--------------

from flask import Flask, render_template, request, jsonify, session, send_file
from flask_cors import CORS
import uuid
import json
import io
from datetime import datetime
import weasyprint

app = Flask(__name__)
app.secret_key = 'autoprocessmap-secret-key-2024'
CORS(app)

sessions = {}

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/start_session', methods=['POST'])
def start_session():
    session_id = str(uuid.uuid4())
    sessions[session_id] = {
        'steps': [],
        'created_at': datetime.now().isoformat()
    }
    session['session_id'] = session_id
    return jsonify({'session_id': session_id, 'message': 'Session started successfully!'})

@app.route('/api/load_sample_data', methods=['POST'])
def load_sample_data():
    session_id = session.get('session_id')
    if not session_id or session_id not in sessions:
        return jsonify({'error': 'No active session'}), 400
    
    sample_steps = [
        {
            'id': 1,
            'name': 'Receive Application',
            'description': 'Customer submits loan application through online portal',
            'responsible': 'Customer Service',
            'kpi': 'Application completeness rate: 95%',
            'priority': 'High'
        },
        {
            'id': 2,
            'name': 'Verify Documents',
            'description': 'Review and validate all submitted documentation',
            'responsible': 'Compliance Team',
            'kpi': 'Document verification time: 2 hours',
            'priority': 'High'
        },
        {
            'id': 3,
            'name': 'Check Credit Score',
            'description': 'Perform credit check and risk assessment',
            'responsible': 'Risk Assessment',
            'kpi': 'Credit check completion: 30 minutes',
            'priority': 'High'
        },
        {
            'id': 4,
            'name': 'Approve Request',
            'description': 'Management review and approval decision',
            'responsible': 'Management',
            'kpi': 'Approval decision time: 4 hours',
            'priority': 'High'
        },
        {
            'id': 5,
            'name': 'Setup Customer Account',
            'description': 'Create customer account and configure services',
            'responsible': 'IT Department',
            'kpi': 'Account setup time: 1 hour',
            'priority': 'Medium'
        },
        {
            'id': 6,
            'name': 'Send Welcome Kit',
            'description': 'Prepare and send welcome materials to customer',
            'responsible': 'Customer Service',
            'kpi': 'Welcome kit delivery: 24 hours',
            'priority': 'Low'
        },
        {
            'id': 7,
            'name': 'Schedule Training',
            'description': 'Arrange customer onboarding training session',
            'responsible': 'Training Team',
            'kpi': 'Training scheduling: 48 hours',
            'priority': 'Medium'
        },
        {
            'id': 8,
            'name': 'Conduct Training',
            'description': 'Deliver comprehensive product training to customer',
            'responsible': 'Training Team',
            'kpi': 'Training completion rate: 98%',
            'priority': 'High'
        },
        {
            'id': 9,
            'name': 'Follow-up Review',
            'description': 'Post-training follow-up and satisfaction survey',
            'responsible': 'Customer Service',
            'kpi': 'Customer satisfaction: 4.5/5',
            'priority': 'Medium'
        }
    ]
    
    sessions[session_id]['steps'] = sample_steps
    return jsonify({
        'message': f'Sample data loaded successfully! {len(sample_steps)} steps loaded on infinity board.',
        'steps': sample_steps
    })

@app.route('/api/add_step', methods=['POST'])
def add_step():
    session_id = session.get('session_id')
    if not session_id or session_id not in sessions:
        return jsonify({'error': 'No active session'}), 400
    
    data = request.json
    step_id = len(sessions[session_id]['steps']) + 1
    
    new_step = {
        'id': step_id,
        'name': data.get('name', ''),
        'description': data.get('description', ''),
        'responsible': data.get('responsible', ''),
        'kpi': data.get('kpi', ''),
        'priority': data.get('priority', 'Medium')
    }
    
    sessions[session_id]['steps'].append(new_step)
    return jsonify({'message': 'Step added successfully!', 'step': new_step})

@app.route('/api/get_steps', methods=['GET'])
def get_steps():
    session_id = session.get('session_id')
    if not session_id or session_id not in sessions:
        return jsonify({'error': 'No active session'}), 400
    
    steps = sessions[session_id]['steps']
    return jsonify({'steps': steps})

@app.route('/api/generate_swimming_lane', methods=['POST'])
def generate_swimming_lane():
    session_id = session.get('session_id')
    if not session_id or session_id not in sessions:
        return jsonify({'error': 'No active session'}), 400
    
    steps = sessions[session_id]['steps']
    if not steps:
        return jsonify({'error': 'No steps available'}), 400
    
    lanes = list(set(step['responsible'] for step in steps))
    
    svg_width = max(1200, len(steps) * 150 + 300)
    svg_height = len(lanes) * 120 + 100
    
    svg_content = f'''
    <svg width="{svg_width}" height="{svg_height}" xmlns="http://www.w3.org/2000/svg">
    <style>
        .lane-header {{ fill: #2563eb; font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; }}
        .step-box {{ fill: #e0f2fe; stroke: #2563eb; stroke-width: 2; rx: 8; }}
        .step-text {{ fill: #1e40af; font-family: Arial, sans-serif; font-size: 12px; }}
        .step-title {{ font-weight: bold; }}
    </style>'''
    
    for i, lane in enumerate(lanes):
        y = i * 120 + 50
        svg_content += f'''
        <rect x="10" y="{y}" width="120" height="80" fill="#f1f5f9" stroke="#cbd5e1" stroke-width="1" rx="4"/>
        <text class="lane-header" x="15" y="{y + 25}">{lane[:12]}...</text>'''
    
    for step in steps:
        lane_index = lanes.index(step['responsible'])
        x = (step['id'] - 1) * 150 + 150
        y = lane_index * 120 + 70
        
        svg_content += f'''
        <rect class="step-box" x="{x}" y="{y}" width="130" height="80"/>
        <text class="step-text step-title" x="{x + 5}" y="{y + 15}">Step {step['id']}</text>
        <text class="step-text" x="{x + 5}" y="{y + 30}">{step['name'][:15]}...</text>
        <text class="step-text" x="{x + 5}" y="{y + 45}">{step['priority']}</text>'''
        
        if step['id'] < len(steps):
            next_step = next((s for s in steps if s['id'] == step['id'] + 1), None)
            if next_step:
                next_lane_index = lanes.index(next_step['responsible'])
                next_x = step['id'] * 150 + 150
                next_y = next_lane_index * 120 + 110
                
                svg_content += f'''
                <line x1="{x + 130}" y1="{y + 40}" x2="{next_x}" y2="{next_y}" 
                      stroke="#2563eb" stroke-width="2" marker-end="url(#arrowhead)"/>'''
    
    svg_content += '''
    <defs>
        <marker id="arrowhead" markerWidth="10" markerHeight="7" 
                refX="9" refY="3.5" orient="auto">
            <polygon points="0 0, 10 3.5, 0 7" fill="#2563eb"/>
        </marker>
    </defs>
    </svg>'''
    
    return jsonify({
        'svg': svg_content,
        'stats': {
            'steps': len(steps),
            'lanes': len(lanes),
            'zoom': 100
        }
    })

@app.route('/api/download_pdf', methods=['POST'])
def download_pdf():
    session_id = session.get('session_id')
    if not session_id or session_id not in sessions:
        return jsonify({'error': 'No active session'}), 400
    
    steps = sessions[session_id]['steps']
    if not steps:
        return jsonify({'error': 'No steps available'}), 400
    
    html_content = f'''
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>AutoProcessMap - Process Documentation</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            .header {{ text-align: center; margin-bottom: 30px; }}
            .step {{ margin-bottom: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 8px; }}
            .step-title {{ font-weight: bold; color: #2563eb; margin-bottom: 5px; }}
            .step-meta {{ color: #666; font-size: 14px; }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>AutoProcessMap v1.08</h1>
            <h2>Process Documentation</h2>
            <p>Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
            <p>Total Steps: {len(steps)} | Reference: autoprocessmap-production</p>
        </div>
        
        <h3>Process Steps:</h3>'''
    
    for step in steps:
        html_content += f'''
        <div class="step">
            <div class="step-title">Step {step['id']}: {step['name']}</div>
            <div class="step-meta">Responsible: {step['responsible']} | Priority: {step['priority']}</div>
            <p>{step['description']}</p>
            <p><strong>KPI:</strong> {step['kpi']}</p>
        </div>'''
    
    html_content += '''
    </body>
    </html>'''
    
    pdf_buffer = io.BytesIO()
    weasyprint.HTML(string=html_content).write_pdf(pdf_buffer)
    pdf_buffer.seek(0)
    
    return send_file(
        pdf_buffer,
        as_attachment=True,
        download_name=f'autoprocessmap-{datetime.now().strftime("%Y%m%d")}.pdf',
        mimetype='application/pdf'
    )

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

=====================================================
